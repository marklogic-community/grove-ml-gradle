/*
 * The most minimal ml-gradle file just has one thing - the ml-gradle plugin declaration.
 *
 * Without a gradle.properties file with properties such as mlAppName and mlRestPort, ml-gradle will use some sensible
 * defaults to generate a new application - an app name of my-app, port 8003, and a username/password combo of
 * admin/admin.
 */

plugins {
  //id 'java' //remove/add as needed
  id "net.saliman.properties" version "1.4.6"
  id "com.marklogic.ml-gradle" version "3.13.0"
}

repositories {
  // To use gradle in offline mode, you just need to add the --offline option. E.g. gradle --offline mlDeploy
  if (project.getGradle().startParameter.isOffline()) {
    println "Using offline repositories"
    maven { url uri(projectMavenRepo) }
  } else {
    println "Using online repositories"
    jcenter()
    mavenCentral()
    maven { url "http://developer.marklogic.com/maven2/" }
  }
}

configurations {
  mlcp {
    // stop Gradle from complaining about "SLF4J: Class path contains multiple SLF4J bindings."
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'org.apache.avro', module: 'avro-tools'
  }
}

dependencies {
  //compile 'com.marklogic:marklogic-xcc:9.0.7' //remove/add as needed
  mlcp "com.marklogic:mlcp:9.0.9"

  mlcp "org.apache.commons:commons-csv:1.6"
  /**
   * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
   * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
   * mlcp include a directory or some other resource that provides a log4j.properties file.
   */
  mlcp files("mlcp/conf")
  mlcp files("mlcp/lib")
}

/**
 * START: Disconnected gradle tasks
 * Reference: https://github.com/derms/ml-gradle/blob/dev/examples/disconnected-project-using-plugins-and-gradlew/build.gradle
 */
gradle.taskGraph.whenReady { graph ->
  if (graph.hasTask(downloadToProjectMavenRepo)) {
    println project.gradle.gradleUserHomeDir
    if (!project.gradle.gradleUserHomeDir.equals(new File(rootDir, projectGradleHome))) {
      throw new GradleException("Please set the gradle user home property to $projectGradleHome on the gradle command line - e.g. \n " +
              (System.getProperty("os.name").startsWith("Windows") ? "" : "./") +
              "gradlew -Dgradle.user.home=$projectGradleHome <task_to_execute>")
    }
  }
}

task downloadToProjectMavenRepo(type: Copy) {
  /*
   * Include any configuration dependencies here that you want to copy the dependencies for.
   * These are defined in the 'dependencies' block. E.g. you need to include
   * configurations.compile.files if you want your java 'compile' dependencies downloaded
   */
  //configurations.compile.files //includes 'java' compile dependencies. Remove/add as needed
  configurations.mlcp.files //includes 'mlcp' dependencies. Remove if not needed

  from new File(gradle.gradleUserHomeDir, 'caches/modules-2/files-2.1') // correct as of gradle 4.7
  into new File(rootDir, projectMavenRepo)
  eachFile {
    List<String> parts = it.path.split('/')
    it.path = (parts[0].replace('.', '/') + '/' + parts[1]) + '/' + parts[2] + '/' + parts[4]
  }
  includeEmptyDirs false
}

def projectZipFilename = projectBaseZipFilename + '-' + new Date().format('yyyyMMddHHmmss') + '.zip'

task makeOfflineZip(type: Zip, dependsOn: downloadToProjectMavenRepo) {
  from rootDir
  excludes = ['.tmp', '.gradle', projectGradleHome, projectZipDirectory, 'build/offline/gradle/wrapper/dists']
  destinationDir(file(projectZipDirectory))
  archiveName = projectZipFilename
  doLast {
    println "Created offline project zip at ${projectZipDirectory}/${projectZipFilename}"
  }
}

/**
 * Extra tasks necessary to ensure proper Grove access to necessary schemas and modules.
*/
task setSchemasPermissions(type: com.marklogic.gradle.task.ServerEvalTask) {
  doFirst {
    println "Changing permissions in " + mlAppConfig.schemasDatabaseName + " for:"
  }
  xquery = "xdmp:invoke('/admin/fix-permissions.xqy', (), map:entry('database', xdmp:database('" + mlAppConfig.schemasDatabaseName + "')))"
}

task setModulesPermissions(type: com.marklogic.gradle.task.ServerEvalTask) {
  doFirst {
    println "Changing permissions in " + mlAppConfig.modulesDatabaseName + " for:"
  }
  xquery = "xdmp:invoke('/admin/fix-permissions.xqy', (), map:entry('database', xdmp:database('" + mlAppConfig.modulesDatabaseName + "')))"
}

mlLoadSchemas.finalizedBy setSchemasPermissions
mlLoadModules.finalizedBy setModulesPermissions
mlDeploy.finalizedBy setSchemasPermissions
mlDeploy.finalizedBy setModulesPermissions

task mlLoadContent(type: com.marklogic.gradle.task.MlcpTask) {
  systemProperty "java.library.path", "mlcp/lib/native"
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlAppConfig.restPort
  input_file_path = "ml-content/"
  output_collections = "config"
  output_permissions = mlAppConfig.name + "-role,read," + mlAppConfig.name + "-role,update"
  output_uri_replace = ".*ml-content/,'/'"
}

mlDeploy.finalizedBy mlLoadContent

/**
 * Use MlcpTask to load sample people data to support Grove.  Each document
 * represents a fictitious person.
*/
task loadSampleData(type: com.marklogic.gradle.task.MlcpTask) {
  systemProperty "java.library.path", "mlcp/lib/native"
  classpath = configurations.mlcp
  command = "IMPORT"
  port = mlAppConfig.restPort
  input_file_path = "sample-data.zip"
  input_compressed = "true"
  output_collections = "data,data/people"
  output_permissions = mlAppConfig.name + "-role,read," + mlAppConfig.name + "-role,update"
  output_uri_replace = ".*.zip,''"
}

